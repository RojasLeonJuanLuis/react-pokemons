'use strict';

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || !1; descriptor.configurable = !0; if ("value" in descriptor) descriptor.writable = !0; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react'),
    _react2 = _interopRequireDefault(_react),
    _spinner = require('./spinner.js'),
    _spinner2 = _interopRequireDefault(_spinner),
    _readBlobFile = require('./read-blob-file.js'),
    _readBlobFile2 = _interopRequireDefault(_readBlobFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call == "object" || typeof call == "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass != "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: !1, writable: !0, configurable: !0 } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Instance the default props
 * @type {PropTypes}
 */
var defaultProps = {
  onLayout: function onLayout() {},
  onError: function onError() {},
  onLoad: function onLoad() {},
  onLoadEnd: function onLoadEnd() {},
  onLoadStart: function onLoadStart() {},
  onAbort: function onAbort() {},
  onProgress: function onProgress() {},
  offset: 0,
  defaultSource: _spinner2.default,
  type: '*',
  minLoaded: 50
};

/**
 * Component to render an image using LazyLoad to request it only if the component is in
 * the viewport and abort the load if the component leaves the viewport
 */

var Image = function (_PureComponent) {
  _inherits(Image, _PureComponent);

  /**
   * Bind component methods to `this`
   * @param  {PropType} props   [description]
   */
  function Image(props) {
    _classCallCheck(this, Image);

    // bind function methods
    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Image).call(this, props));

    _this.state = {
      image: _this.props.defaultSource
    };
    _this.isRequesting = !1;
    _this.progress = {
      loaded: 0,
      total: 1
    };
    _this.checkViewport = _this.checkViewport.bind(_this);
    _this.setRef = _this.setRef.bind(_this);

    _this.handleLoadEnd = _this.handleLoadEnd.bind(_this);
    _this.handleAbort = _this.handleAbort.bind(_this);
    _this.handleProgress = _this.handleProgress.bind(_this);
    _this.handleError = _this.handleError.bind(_this);
    _this.handleLoadStart = _this.handleLoadStart.bind(_this);
    _this.handleLoad = _this.handleLoad.bind(_this);
    return _this;
  }

  /**
   * The state contains the image base64 string to use
   * @type {Object}
   */


  _createClass(Image, [{
    key: 'componentDidMount',


    /**
     * Call the onLayout after the component is renderer
     * Create the XHR object
     * Set the event listener for the scroll event to check if the component is in viewport
     * Check the viewport one time to now if it's already in it
     */
    value: function componentDidMount() {
      this.props.onLayout({ element: this });

      this.request = new XMLHttpRequest();
      this.request.responseType = 'arraybuffer';

      window.addEventListener('scroll', this.checkViewport);
      this.checkViewport();
    }

    /**
     * Call the onLayout callback if the component is re-rendered
     */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.props.onLayout({ element: this });
    }

    /**
     * Remove scroll event listener if the component is unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.checkViewport);
      this.request.abort();
    }

    /**
     * Get the reference to the image
     * @param {Element} element The DOM element to set the reference
     */

  }, {
    key: 'setRef',
    value: function setRef(element) {
      this.element = element;
      return this;
    }

    /**
     * Fetch the image and save it in the state
     */

  }, {
    key: 'fetch',
    value: function fetch() {
      // set request event handlers
      this.request.onloadstart = this.handleLoadStart;
      this.request.onprogress = this.handleProgress;
      this.request.onload = this.handleLoad;
      this.request.onloadend = this.handleLoadEnd;
      this.request.onabort = this.handleAbort;
      this.request.onerror = this.handleError;

      // open AJAX request
      this.request.open('GET', this.props.source);
      // send request
      return this.request.send();
    }

    /**
     * Handle load start event
     * @param {Object} event Request start event object
     */

  }, {
    key: 'handleLoadStart',
    value: function handleLoadStart(event) {
      this.isRequesting = !0;
      var element = this;

      if (event.lengthComputable) {
        this.progress.loaded = 0;
        this.progress.total = event.total;
      }

      return this.props.onLoadStart({ element: element });
    }

    /**
     * Set the loaded progress (and the total)
     * @param {Object} event The progress event data
     */

  }, {
    key: 'handleProgress',
    value: function handleProgress(event) {
      var element = this;

      if (event.lengthComputable) {
        this.progress.loaded = event.loaded;
      }

      return this.props.onProgress({ element: element });
    }

    /**
     * Handle the XHR load event
     * @param {Object} event The load event data
     */

  }, {
    key: 'handleLoad',
    value: function handleLoad() {
      var element = this;
      this.isRequesting = !1;
      return this.props.onLoad({ element: element });
    }

    /**
     * If the request ended successful get the response as a blob object, transform it to base64,
     * remove the scroll event listener and update the `state.image` value`
     * @param {Object} event The load end event data
     */

  }, {
    key: 'handleLoadEnd',
    value: function handleLoadEnd() {
      var _this2 = this,
          element = this;

      // if the request status es between 200 and 300
      if (this.request.status >= 200 && this.request.status < 300) {
        // transform response to a blob
        var blob = new Blob([this.request.response], { type: 'image/' + this.props.type });
        // read blob as a base64 string
        return (0, _readBlobFile2.default)(blob).then(function (image) {
          // set the image base64 string in the state
          _this2.setState({ image: image }, function () {
            // remove event scroll listener
            window.removeEventListener('scroll', _this2.checkViewport);
            // set the component as not requesting anymore
            _this2.isRequesting = !1;
            // call the `onLoadEnd` callback
            return _this2.props.onLoadEnd({ element: element });
          });
        }).catch(function (error) {
          // set the component as not requesting anymore
          _this2.isRequesting = !1;
          // if an error happens call the `onError` callback
          return _this2.props.onError({ error: error, element: element });
        });
      }

      return null;
    }

    /**
     * Handle request error event
     * @param {Object} event The error event data
     */

  }, {
    key: 'handleError',
    value: function handleError(event) {
      var element = this;
      this.isRequesting = !1;
      return this.props.onError({ element: element, error: new Error(event.response) });
    }

    /**
     * Handle the request abort event
     * @param {Object} event The abort event data
     */

  }, {
    key: 'handleAbort',
    value: function handleAbort() {
      var element = this;
      this.isRequesting = !1;
      return this.props.onAbort({ element: element });
    }

    /**
     * Check if the component is in the current viewport and load the image
     */

  }, {
    key: 'checkViewport',
    value: function checkViewport() {
      if (this.isInViewport && !this.isRequesting) {
        // if is in viewport and is not requesting start fetching
        return this.fetch();
      }
      if (!this.isInViewport && this.isRequesting) {
        // if isn't in viewport and is requesting
        if (this.amountLoaded < this.props.minLoaded || isNaN(this.amountLoaded)) {
          // if the amount loaded is lower than the `this.props.minLoaded`
          // or is NaN abort the request
          return this.request.abort();
        }
      }
      return null;
    }

    /**
     * Define the prop types
     * @type {PropType}
     */


    /**
     * If the component is requesting an image or not
     * @type {Boolean}
     */


    /**
     * Progress loaded and total amount of bytes
     * @type {Object}
     */

  }, {
    key: 'render',


    /**
     * Component renderer method
     * @return {Object} The image JSX element
     */
    value: function render() {
      return _react2.default.createElement('img', _extends({}, this.imgProps, {
        ref: this.setRef,
        src: this.state.image
      }));
    }
  }, {
    key: 'amountLoaded',


    /**
     * The progress of amount lodaded
     * @return {Number} The percentaje loaded
     */
    get: function get() {
      return this.progress.loaded * 100 / this.progress.total;
    }

    /**
     * Check if the component is in the viewport
     * @return {Boolean} If the component is in viewport
     */

  }, {
    key: 'isInViewport',
    get: function get() {
      // get element position in viewport
      var rect = this.element.getBoundingClientRect(),
          viewportHeight = window.innerHeight || document.documentElement.clientHeight,
          viewportWidth = window.innerWidth || document.documentElement.clientWidth;
      // get viewport height and width

      // check if the element is in the viewport (or near to them)
      return rect.bottom >= 0 - this.props.offset && rect.right >= 0 - this.props.offset && rect.top < viewportHeight + this.props.offset && rect.left < viewportWidth + this.props.offset;
    }

    /**
     * Get the images props without the component own props
     * @return {Object} The filtered props
     */

  }, {
    key: 'imgProps',
    get: function get() {
      var _this3 = this,
          ownProps = ['onLayout', 'onError', 'onLoad', 'onLoadEnd', 'onLoadStart', 'onAbort', 'onProgress', 'resizeMode', 'source', 'defaultSource', 'offset', 'minLoaded'];

      return Object.keys(this.props).filter(function (propName) {
        return ownProps.indexOf(propName) === -1;
      }).reduce(function (props, propName) {
        return _extends({}, props, _defineProperty({}, propName, _this3.props[propName]));
      }, {});
    }
  }]);

  return Image;
}(_react.PureComponent);

Image.defaultProps = defaultProps;
exports.default = Image;